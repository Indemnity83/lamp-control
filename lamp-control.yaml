esphome:
  name: lamp-control

esp8266:
  board: esp12e

api:
  encryption:
    key: !secret api_encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${name}-${mac_suffix}"

captive_portal:

# web_server:
#   port: 80
#   # Optional: Enable for a simple web interface for diagnostics and control.
#   # Not recommended for production devices due to security concerns.

# i2c:
#   sda: GPIO4
#   scl: GPIO5
#   # Optional: Enable if you want to use I2C sensors or peripherals.

# spi:
#   clk_pin: GPIO14
#   mosi_pin: GPIO13
#   miso_pin: GPIO12
#   # Optional: Enable if you want to use SPI devices.

globals:
  - id: brightness_step
    type: int
    restore_value: no
    initial_value: '0'
    
output:
  - platform: esp8266_pwm
    pin: GPIO2
    id: lamp_pwm
    frequency: 1000 Hz

light:
  - platform: monochromatic
    id: lamp_light
    name: "Reading Lamp"
    output: lamp_pwm
    default_transition_length: 300ms
    restore_mode: ALWAYS_OFF
    gamma_correct: 2.2

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO16
    internal: true
    id: touch_sensor
    on_click:
      then:
        - lambda: |-
            if (id(lamp_light).current_values.is_on()) {
              id(brightness_step) = (id(brightness_step) + 1) % 4;
            }
            static const float L[4] = {1.0f, 0.75f, 0.50f, 0.25f};
            auto call = id(lamp_light).turn_on();
            call.set_brightness(L[id(brightness_step)]);
            call.perform();
    on_multi_click:
      - timing:
          - ON for at least 1s
        then:
          - light.turn_off: lamp_light
